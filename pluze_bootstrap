#!/bin/bash
#
# The MIT License (MIT)
#
# Copyright (c) 2015 Paco Castro
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

#
# BASIC EXPLANATION:
# =================
#
# PLUZE is both a launcher for existing toolkits - library functions (stored in script files that can be sourced) - and
# a documentation manager for those function libraries.
# Toolkits are assumed to be independent and contain methods that you want to call from other scripts. Please notice that
# any code outside of a function in a toolkit will be executed during the load time.
#
# PLUZE is based on 3 very simple methods:
#
#  1. pluze_load(): sources a toolkit file
#  2. pluze_help(): finds help for a toolkit or a toolkit method
#  3. pluze run(): executes a toolkit method
#
# The basic usage of PLUZE goes like this:
#  #!/bin/bash
#
#  shfolder=`dirname $0`
#  . "$PLUZE_BOOTSTRAP_DIR/pluze_bootstrap" <= bootstrap pluze
#
#  pluze_load "git"              <= load the "git" toolkit functions. You can load as many toolkits as you need at any time
#
#  pluze_run $*                  <= execute the function in $1 passing the rest of arguments as function parameters
#
# Accepted environment variables:
#   PLUZE_DRYRUN:        Set dryrun on. Please notice that the dryrun behaviour has to be implemented in the method you are calling
#                        dryrun mode can be enabled passing the --dryrun parameter
#   PLUZE_VERBOSE:       Show verbose information
#   PLUZE_TOOLKITS_DIR:  Where to find the toolkits
#   PLUZE_BOOTSTRAP_DIR: Where to find the bootstrap script
# 
# Internally managed variables:
#   pluze_toolkits:  List of loaded toolkits (so that they are not loaded more than once)
#   pluze_functions: Available loaded functions. Only these methods can be executed using PLUZE.
#                    Please notice that internal functions need to be marked with "# Internal" comment like this:
#                      function f() { # Internal
#
# The help information is retrieved when using the -h or the --help parameter.
# If no method is passed then the help for all loaded toolkits will be shown. If a method is passed the help for that method
# will be shown.
# Toolkit files and methods should be documented using the following pattern:
#
#  ##DOC: ffmpeg classic usages                <= This is the Toolkit file general documentation
#  ##DOC:
#
#  ##DOC: convert <format> <quality> <file>:  <= Method description
#  ##DOC:   format:  avi, mp4, mpg, etc       <= Parameters description
#  ##DOC:   quality: 3, 4, 5, etc
#  ##DOC:   file:    File to convert



# Load toolkit file functions
#
# Load order: PLUZE_TOOLKITS_DIR, bootstrap_dir/pluze_toolkits, ~/bin/pluze_toolkits, ./pluze_toolkits 
#   $1:     requested functions library
#   return: 0 if loaded, 1 otherwise
function pluze_load() {
local loaded
local env_dir
local func
local dir
local t

  loaded=1
  env_dir=`dirname $0`
  for dir in $PLUZE_TOOLKITS_DIR $env_dir/pluze_toolkits ~/bin/pluze_toolkits $PWD/pluze_toolkits; do 
    if [ $PLUZE_VERBOSE -ne 0 ]; then
      echo pluze_load scanning [$dir]...
    fi

    if [ "x"$dir!="x" ]; then
      if [ -x $dir/$1 ]; then # if file exists and it is executable
        if [ $PLUZE_VERBOSE -ne 0 ]; then
          echo pluze_load $dir/$1
        fi
        . $dir/$1 # source file
        pluze_toolkits[${#pluze_toolkits[*]}]=$dir/$1
        loaded=0
        # store file functions in available functions list
        for func in `grep "^function " $dir/$1 | grep -vi "# Internal" | cut -d " " -f 2 | cut -d "(" -f 1`; do
          t=`type -t $func` 
          if [ $t == "function" ]; then
            pluze_functions[${#pluze_functions[*]}]=$func
          fi
        done
        break
      fi
    fi
  done
  
  if [ $PLUZE_VERBOSE -ne 0 ]; then
    echo Toolkits: ${pluze_toolkits[*]}
    echo Functions: ${pluze_functions[*]}
  fi

  return $loaded
}

# Show available help
#
#   $1: toolkit file. If not present, help for all loaded toolkits is shown
function pluze_help() {
local i

  if [ $PLUZE_VERBOSE -ne 0 ]; then
    echo pluze_help
  fi

  if [ $# -eq 0 ]; then
    for i in ${pluze_toolkits[*]}; do
      base=`basename $i`
      echo "$i toolkit help:"
      grep "^##DOC:" $i | sed 's/^##DOC://g'
      echo
    done
  else
    grep "^##DOC:" $1 | sed 's/^##DOC://g'
  fi

  echo
  echo "  --help, -h  show this help"
  echo "  --dryrun    can precede any of the script commands"
  echo "              (however it is not guaranteed that they can be debugged)"
  echo
}

# Show available help for a given method
#
#   $1: method name
function pluze_method_help() {
local ini
local end
local lines

  if [ $# -ne 1 ]; then
    echo "ERROR: pluze_method_help requires the method name as a parameter"
    exit -1
  fi

  pluze_is_method_available $1
  if [ $? -ne 0 ] || [ ${#pluze_toolkits[*]} -eq 0 ]; then
    echo "ERROR: method [$1] not loaded"
    pluze_help
    exit -1
  fi
  
  cat ${pluze_toolkits[*]} > /tmp/pluze_help
  ini=`grep -n "^##DOC: "$1" " /tmp/pluze_help | cut -d ":" -f 1 | tail -n 1`
  end=`grep -n "^function "$1"()" /tmp/pluze_help | cut -d ":" -f 1 | tail -n 1`
  if [ "x"$ini == "x" ] || [ "x"$end == "x" ]; then
    echo "ERROR: No help found for method [$1]"
    exit -1
  fi

  lines=$[end-ini]
  tail -n +$ini /tmp/pluze_help | head -n $lines | sed 's/^##DOC://g'

  rm -f /tmp/pluze_help
}


# Find method in the loaded methods list
#
# $1:     Method to be found
# return: 0 if found, 1 otherwise
function pluze_is_method_available() {
local i

  if [ $# -eq 0 ]; then
    return 1
  fi
  if [ "x"$1 == "x" ]; then
    return 1
  fi

  for i in ${pluze_functions[*]}; do
    if [ $i == $1 ]; then
      return 0
    fi
  done

  return 1
}

# Execute loaded method
#
# $1:     method name
# $2..:   method params
# return: result of the executed method or 0 if not available or help invoked
function pluze_run() {
local i
local arg
local params
local method
local show_help
local result

  show_help=0

  if [ $PLUZE_VERBOSE -ne 0 ]; then
    echo pluze_run $*
  fi

  declare -a params

  # The first argument is the method name
  # The rest of arguments are th method parameters
  i=0
  for arg in "$@"; do # Iterate all parameters
    if [ $PLUZE_VERBOSE -ne 0 ]; then
      echo "argument($i/$#): $arg"
    fi
    if [ "$arg" == "--dryrun" ]; then
      PLUZE_DRYRUN=1
    elif [ "$arg" == "--help" ]; then
      show_help=1
    elif [ "$arg" == "-h" ]; then
      show_help=1
    else
      if [ $i -eq 0 ]; then
        method=$arg
      else
        params[$i]=$arg
      fi
      i=$[i+1]
    fi
  done
  if [ $show_help -eq 1 ]; then
    if [ -z $method ]; then # All available methods help
      pluze_help
    else # Help for a given method
      pluze_method_help $method
    fi
    result=1
  else
    pluze_is_method_available $method
    if [ $? -eq 0 ]; then
      if [ $PLUZE_VERBOSE -ne 0 ]; then
        echo "pluze_run detects method [$method] and" "${#params[@]}" "param(s) [${params[*]}]"
      fi

      $method "${params[@]}"
      result=$?

      if [ $PLUZE_DRYRUN -ne 0 ]; then
        echo DRYRUN
      fi

      if [ ! -z $result ] && [ $result -eq 255 ]; then
        pluze_method_help $method
      fi
    else
      echo "ERROR: the [$method] method is not available"
      pluze_help
      result=1
    fi
  fi

  return $result
}


declare -a pluze_functions
declare -a pluze_toolkits

if [ -z "$PLUZE_VERBOSE" ]; then
  PLUZE_VERBOSE=0
fi
if [ -z "$PLUZE_DRYRUN" ]; then
  PLUZE_DRYRUN=0
fi
